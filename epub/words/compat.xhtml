<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>ANS Forth / Forth 2012 Compatibility Words</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="ans-forth-forth-2012-compatibility-words">
<h1>ANS Forth / Forth 2012 Compatibility Words</h1>
<p>This is a collection of assorted words added for compatibility with ANS Forth and Forth 2012. Because there may be conflicts with existing words, particularly in the case of <code class="docutils literal notranslate"><span class="pre">find</span></code>, these words are placed in a <code class="docutils literal notranslate"><span class="pre">compat</span></code> module from which they may be imported.</p>
<p>One important note is that when this is done within the default module, the word <code class="docutils literal notranslate"><span class="pre">find</span></code> provided by this module will be shadowed by the existing <code class="docutils literal notranslate"><span class="pre">find</span></code> word in the <code class="docutils literal notranslate"><span class="pre">forth</span></code> module; in this case one will have to either refer to it as <code class="docutils literal notranslate"><span class="pre">compat::find</span></code> or shadow the <code class="docutils literal notranslate"><span class="pre">find</span></code> in the <code class="docutils literal notranslate"><span class="pre">forth</span></code> module with:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="p">:</span> <span class="n">find</span> <span class="n">compat</span><span class="p">::</span><span class="n">find</span> <span class="p">;</span>
</pre></div>
</div>
<section id="compat">
<h2><code class="docutils literal notranslate"><span class="pre">compat</span></code></h2>
<p>The <code class="docutils literal notranslate"><span class="pre">compat</span></code> module contains the following words:</p>
<section id="word">
<h3><code class="docutils literal notranslate"><span class="pre">word</span></code></h3>
<p>( delim “&lt;delims&gt;word&lt;delim&gt;” – c-addr )</p>
<p>Parse a toke ndelimited by a given character; note that this is not reentrant because the returned counted string is stored in a single global buffer; for new code <code class="docutils literal notranslate"><span class="pre">token</span></code> / <code class="docutils literal notranslate"><span class="pre">parse-name</span></code> is recommended when possible. Also, this word does not properly handle all sorts of whitespace, such as tabs and values less than $20.</p>
</section>
<section id="parse">
<h3><code class="docutils literal notranslate"><span class="pre">parse</span></code></h3>
<p>( delim “text&lt;delim&gt;” – c-addr u )</p>
<p>Parse text up to a given character; the the returned string is in the input buffer and thus avoids the reentrancy problems of <code class="docutils literal notranslate"><span class="pre">word</span></code>.</p>
</section>
<section id="find">
<h3><code class="docutils literal notranslate"><span class="pre">find</span></code></h3>
<p>( c-addr – c-addr 0 | xt 1 | xt -1 )</p>
<p>Find a word’s xt using a counted string for its name and whether it is immediate (signaled by 1) or non-immediate (signaled by -1); return the name as a counted string and 0 if it is not found.</p>
</section>
<section id="cmove">
<h3><code class="docutils literal notranslate"><span class="pre">cmove</span></code></h3>
<p>( c-addr1 c-addr2 u – )</p>
<p>Implement the traditional Forth string copying word <code class="docutils literal notranslate"><span class="pre">cmove</span></code> - for new code using <code class="docutils literal notranslate"><span class="pre">move</span></code> is recommended.</p>
</section>
<section id="id1">
<h3><code class="docutils literal notranslate"><span class="pre">cmove&gt;</span></code></h3>
<p>( c-add1 c-addr2 u – )</p>
<p>Implement the traditional Forth string copying word <code class="docutils literal notranslate"><span class="pre">cmove&gt;</span></code> - for new code using <code class="docutils literal notranslate"><span class="pre">move</span></code> is recommended.</p>
</section>
<section id="within">
<h3><code class="docutils literal notranslate"><span class="pre">within</span></code></h3>
<p>( test low high – flag )</p>
<p>Determine whether a value is between ‘low’, inclusive, and ‘high’, exclusive.</p>
</section>
<section id="number">
<h3><code class="docutils literal notranslate"><span class="pre">&gt;number</span></code></h3>
<p>( D: acc c-addr u – acc’ c-addr’ u’ )</p>
<p>Parse a number in a string ‘c-addr u’ with an accumulator initialized as a double-cell value ‘acc’ using the base stored in BASE</p>
</section>
<section id="compare">
<h3><code class="docutils literal notranslate"><span class="pre">compare</span></code></h3>
<p>( c-addr1 u1 c-addr2 u2 – n )</p>
<p>Compare two strings for both content and length using the numeric values of bytes compared within and shorter common length.</p>
</section>
<section id="erase">
<h3><code class="docutils literal notranslate"><span class="pre">erase</span></code></h3>
<p>( c-addr u – )</p>
<p>Fill a buffer with zero bytes.</p>
</section>
<section id="blank">
<h3><code class="docutils literal notranslate"><span class="pre">blank</span></code></h3>
<p>( c-addr u – )</p>
<p>Fill a buffer with spaces.</p>
</section>
<section id="string">
<h3><code class="docutils literal notranslate"><span class="pre">/string</span></code></h3>
<p>( c-addr u n – c-addr’ u’ )</p>
<p>Truncate the first n bytes of a string.</p>
</section>
<section id="trailing">
<h3><code class="docutils literal notranslate"><span class="pre">-trailing</span></code></h3>
<p>( c-addr u – c-addr’ u’ )</p>
<p>Remove spaces at the end of a string.</p>
</section>
<section id="search">
<h3><code class="docutils literal notranslate"><span class="pre">search</span></code></h3>
<p>( c-addr1 u1 c-addr2 u2 – c-addr3 u3 flag )</p>
<p>Search a string from its start for a second string; if it is found, return the remainder of the first string starting from where the second string was found along with true; else return the whole first string and false.</p>
</section>
<section id="sliteral">
<h3><code class="docutils literal notranslate"><span class="pre">sliteral</span></code></h3>
<p>( compilation: c-addr1 u – ) ( runtime: – c-addr2 u )</p>
<p>Compile a string literal.</p>
</section>
<section id="align">
<h3><code class="docutils literal notranslate"><span class="pre">align</span></code></h3>
<p>( – )</p>
<p>Align the current <code class="docutils literal notranslate"><span class="pre">here</span></code> pointer to the next closest cell.</p>
</section>
<section id="aligned">
<h3><code class="docutils literal notranslate"><span class="pre">aligned</span></code></h3>
<p>( a-addr – a-addr’ )</p>
<p>Align an address to the next closest cell.</p>
</section>
<section id="char">
<h3><code class="docutils literal notranslate"><span class="pre">char+</span></code></h3>
<p>( c-addr – c-addr’ )</p>
<p>Increment an address by the size of one character, i.e. one byte.</p>
</section>
<section id="chars">
<h3><code class="docutils literal notranslate"><span class="pre">chars</span></code></h3>
<p>( n – n’ )</p>
<p>Get the size of <em>n</em> characters in bytes; this is a no-op.</p>
</section>
<section id="parse-name">
<h3><code class="docutils literal notranslate"><span class="pre">parse-name</span></code></h3>
<p>( “token” – c-addr u )</p>
<p>Parse a single token from the input.</p>
</section>
<section id="r">
<h3><code class="docutils literal notranslate"><span class="pre">.r</span></code></h3>
<p>( n width – )</p>
<p>Output a right-justified signed value in a specified field width; note that if the value is wider than the specified field width the whole value will be output but no padding spaces will be added.</p>
</section>
<section id="u-r">
<h3><code class="docutils literal notranslate"><span class="pre">u.r</span></code></h3>
<p>( u width – )</p>
<p>Output a right-justified unsigned value in a specified field width; note that if the value is wider than the specified field width the whole value will be output but no padding spaces will be added.</p>
</section>
<section id="holds">
<h3><code class="docutils literal notranslate"><span class="pre">holds</span></code></h3>
<p>( c-addr u – )</p>
<p>Add multiple characters to &lt;# # #&gt; numeric formatting.</p>
</section>
<section id="n-r">
<h3><code class="docutils literal notranslate"><span class="pre">n&gt;r</span></code></h3>
<p>( xn .. x1 N – ; R: – x1 .. xn n )</p>
<p>Transfer N items and count to the return stack.</p>
</section>
<section id="nr">
<h3><code class="docutils literal notranslate"><span class="pre">nr&gt;</span></code></h3>
<p>( – xn .. x1 N ; R: x1 .. xn N – )</p>
<p>Pull N items and count off the return stack.</p>
</section>
<section id="x-invalid-input-spec">
<h3><code class="docutils literal notranslate"><span class="pre">x-invalid-input-spec</span></code></h3>
<p>( – )</p>
<p>Invalid input specification exception.</p>
</section>
<section id="save-input">
<h3><code class="docutils literal notranslate"><span class="pre">save-input</span></code></h3>
<p>( – xn … x1 n )</p>
<p>Save input specification.</p>
</section>
<section id="restore-input">
<h3><code class="docutils literal notranslate"><span class="pre">restore-input</span></code></h3>
<p>( xn … x1 n – )</p>
<p>Restore input specification.</p>
</section>
<section id="refill">
<h3><code class="docutils literal notranslate"><span class="pre">refill</span></code></h3>
<p>( – flag )</p>
<p>Refill the input buffer (and return whether EOF has not been reached)</p>
</section>
<section id="sm-rem">
<h3><code class="docutils literal notranslate"><span class="pre">sm/rem</span></code></h3>
<p>( d n – rem quot )</p>
<p>Symmetric division.</p>
</section>
<section id="fm-mod">
<h3><code class="docutils literal notranslate"><span class="pre">fm/mod</span></code></h3>
<p>( d n – rem quot )</p>
<p>Floored division.</p>
</section>
<section id="unused">
<h3><code class="docutils literal notranslate"><span class="pre">unused</span></code></h3>
<p>( – u )</p>
<p>Get the amount of remainign dictionary space in the current task’s RAM dictionary</p>
</section>
<section id="abort">
<h3><code class="docutils literal notranslate"><span class="pre">abort</span></code></h3>
<p>( – )</p>
<p>Raise an exception <code class="docutils literal notranslate"><span class="pre">x-abort</span></code>.</p>
</section>
<section id="id2">
<h3><code class="docutils literal notranslate"><span class="pre">abort&quot;</span></code></h3>
<p>( “message” – ) ( Runtime: flag – )</p>
<p>Raise an exception that displays a message and a following newline if the value on the stack at runtime is non-zero.</p>
</section>
<section id="catch">
<h3><code class="docutils literal notranslate"><span class="pre">catch</span></code></h3>
<p>( xt – except|0 )</p>
<p>Catch an exception; a synonym for <code class="docutils literal notranslate"><span class="pre">try</span></code>.</p>
</section>
<section id="throw">
<h3><code class="docutils literal notranslate"><span class="pre">throw</span></code></h3>
<p>( except – )</p>
<p>Throw an exception, converting standard exceptions to zeptoforth exceptions. Note that -2 is not handled in a standard way because there is no fixed message buffer for <code class="docutils literal notranslate"><span class="pre">abort&quot;</span></code>.</p>
</section>
<section id="x-abort">
<h3><code class="docutils literal notranslate"><span class="pre">x-abort</span></code></h3>
<p>( – )</p>
<p>An exception which displays a message <code class="docutils literal notranslate"><span class="pre">aborted</span></code>.</p>
</section>
<section id="x-unknown">
<h3><code class="docutils literal notranslate"><span class="pre">x-unknown</span></code></h3>
<p>( – )</p>
<p>An unknown exception, corresponding to exception numbers &lt; 0 which do not have standard meanings.</p>
</section>
<section id="id3">
<h3><code class="docutils literal notranslate"><span class="pre">?</span></code></h3>
<p>( addr – )</p>
<p>Fetch a value from an address and print it as an integer.</p>
</section>
<section id="also">
<h3><code class="docutils literal notranslate"><span class="pre">also</span></code></h3>
<p>( – )</p>
<p>Duplicate the first entry on the search order.</p>
</section>
<section id="definitions">
<h3><code class="docutils literal notranslate"><span class="pre">definitions</span></code></h3>
<p>( – )</p>
<p>Make the compilation wordlist the same as the first entry on the search order.</p>
</section>
<section id="forth-wordlist">
<h3><code class="docutils literal notranslate"><span class="pre">forth-wordlist</span></code></h3>
<p>( – wid )</p>
<p>A synonym for zeptoforth FORTH.</p>
</section>
<section id="forth">
<h3><code class="docutils literal notranslate"><span class="pre">forth</span></code></h3>
<p>( – )</p>
<p>Set the topmost wordlist with the FORTH wordlist.</p>
</section>
<section id="only">
<h3><code class="docutils literal notranslate"><span class="pre">only</span></code></h3>
<p>( – )</p>
<p>Set the wordlist order to the minimum default wordlist order.</p>
</section>
<section id="order">
<h3><code class="docutils literal notranslate"><span class="pre">order</span></code></h3>
<p>( – )</p>
<p>Display the searchlist order.</p>
</section>
<section id="previous">
<h3><code class="docutils literal notranslate"><span class="pre">previous</span></code></h3>
<p>( – ) get-order ?dup if nip 1- set-order then ;</p>
<p>Remove the topmost entry of the wordlist order.</p>
</section>
<section id="search-wordlist">
<h3><code class="docutils literal notranslate"><span class="pre">search-wordlist</span></code></h3>
<p>( c-addr u wid – 0 | xt 1 | xt -1 )</p>
<p>Find a word in a wordlist’s xt using a string for its name and whether it is immediate (signaled by 1) or non-immediate (signaled by -1); return 0 if it is not found. Unlike ANS FIND it does not used a counted string and does not return the string being searched for if no word is found.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>