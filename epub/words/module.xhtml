<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.19: https://docutils.sourceforge.io/" />

    <title>Module Words</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-words">
<h1>Module Words</h1>
<p>Modules in zeptoforth are built on top of wordlists, and form a user-friendly means of controlling word namespaces instead of manually manipulating wordlists. Modules and wordlists are one and the same, but by convention they are named with <code class="docutils literal notranslate"><span class="pre">*</span></code>.</p>
<p>At any given time once <code class="docutils literal notranslate"><span class="pre">src/forth/common/module.fs</span></code> is loaded there is a module stack which controls how module words manipulate the wordlist order. Initially there is one entry on the module stack, corresponding to the <code class="docutils literal notranslate"><span class="pre">forth</span></code> wordlist. When new entries are pushed onto the module stack, they save the state of <code class="docutils literal notranslate"><span class="pre">base</span></code> prior to their creation, and restore it once they are popped. Also, module stack entries specify the current wordlist for them, and when module stack entries immediately above them on the stack are popped, their wordlist is restored as the current wordlist.</p>
<p>A new module is defined by <code class="docutils literal notranslate"><span class="pre">begin-module</span></code>; the module named must not exist yet.  An existing module can be extended by <code class="docutils literal notranslate"><span class="pre">continue-module</span></code>; the named module must exist.  Definitions after that point are added to the module, until <code class="docutils literal notranslate"><span class="pre">end-module</span></code> or <code class="docutils literal notranslate"><span class="pre">end-module&gt;</span></code> is seen.</p>
<p>Within a given module, the user may import and unimport modules/wordlists, which pushes them on the wordlist order and removes them from that module’s portion of the wordlist’s order respectively. Note that all the wordlists imported with a module definition are automatically unimported when that module definition is ended.</p>
<p>Words inside modules or inside nested modules may be used without importing the modules in question with <em>paths</em> specified with <em>module</em><code class="docutils literal notranslate"><span class="pre">::</span></code><em>word</em> or, mor generally, <em>module0</em><code class="docutils literal notranslate"><span class="pre">::</span></code>…<code class="docutils literal notranslate"><span class="pre">::</span></code><em>modulen</em><code class="docutils literal notranslate"><span class="pre">::</span></code><em>word</em>. These paths can be used not simply by the outer interpreter but also by any word which looks up another word by name, such as <code class="docutils literal notranslate"><span class="pre">'</span></code>, <code class="docutils literal notranslate"><span class="pre">[']</span></code>, <code class="docutils literal notranslate"><span class="pre">postpone</span></code>, <code class="docutils literal notranslate"><span class="pre">averts</span></code>, and <code class="docutils literal notranslate"><span class="pre">triggers</span></code>.</p>
<p>Note that it is recommended that once <code class="docutils literal notranslate"><span class="pre">src/common/forth/module.fs</span></code> is loaded, the user should not manually use <code class="docutils literal notranslate"><span class="pre">set-order</span></code> or <code class="docutils literal notranslate"><span class="pre">set-current</span></code>, as the module system will not know about this and thus unexpected results may occur.</p>
<section id="forth">
<h2><code class="docutils literal notranslate"><span class="pre">forth</span></code></h2>
<p>The following words are defined in <code class="docutils literal notranslate"><span class="pre">forth</span></code>:</p>
<section id="x-already-defined">
<h3><code class="docutils literal notranslate"><span class="pre">x-already-defined</span></code></h3>
<p>( – )</p>
<p>Module already defined exception.</p>
</section>
<section id="x-not-found">
<h3><code class="docutils literal notranslate"><span class="pre">x-not-found</span></code></h3>
<p>( – )</p>
<p>Module not found exception.</p>
</section>
<section id="begin-module">
<h3><code class="docutils literal notranslate"><span class="pre">begin-module</span></code></h3>
<p>( “name” – )</p>
<p>Begin the definition of module <em>name</em>; module <em>name</em> must not already exist or <code class="docutils literal notranslate"><span class="pre">x-already-defined</span></code> will be raised.</p>
</section>
<section id="continue-module">
<h3><code class="docutils literal notranslate"><span class="pre">continue-module</span></code></h3>
<p>( “name” – )</p>
<p>Continue the definition of a preexisting module <em>name</em>; if module <em>name</em> does not exist <code class="docutils literal notranslate"><span class="pre">x-not-found</span></code> will be raised.</p>
</section>
<section id="private-module">
<h3><code class="docutils literal notranslate"><span class="pre">private-module</span></code></h3>
<p>( – )</p>
<p>Begin the definition of a private module, i.e a module not bound to a word.</p>
</section>
<section id="end-module">
<h3><code class="docutils literal notranslate"><span class="pre">end-module</span></code></h3>
<p>( – )</p>
<p>End the definition of the module at the top of the module stack, removing each wordlist for each module imported within it from the wordlist order.</p>
</section>
<section id="id1">
<h3><code class="docutils literal notranslate"><span class="pre">end-module&gt;</span></code></h3>
<p>( –  module )</p>
<p>End the definition of the module at the top of the module stack, removing each wordlist for each module imported within it from th e wordlist order, and then push the module whose definition had ended onto the data stack.</p>
</section>
<section id="import">
<h3><code class="docutils literal notranslate"><span class="pre">import</span></code></h3>
<p>( module – )</p>
<p>Import a specified module into the current module’s wordlist order; if the module does not exist <code class="docutils literal notranslate"><span class="pre">x-not-found</span></code> is raised.</p>
</section>
<section id="import-from">
<h3><code class="docutils literal notranslate"><span class="pre">import-from</span></code></h3>
<p>( module “name” – )</p>
<p>Import a specified named word from within the specified module into the current namespace; note that this word will not shadow identically named words defined in the current namespace, and will persist until the end of the current module’s definition.</p>
</section>
<section id="begin-imports-from">
<h3><code class="docutils literal notranslate"><span class="pre">begin-imports-from</span></code></h3>
<p>( module “name0” … “namen” “end-imports-from” – )</p>
<p>Import multiple specified named words from within the specified module into the current namespace; note that these words will not shadow identically named words defined in the current namespace, and will persist untilt he end of the current module’s definition. Note that these imports can cross multiple lines of input, as in:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">begin</span><span class="o">-</span><span class="n">module</span> <span class="n">foobar</span>
  <span class="p">:</span> <span class="n">foo</span> <span class="o">.</span><span class="s2">&quot; FOO &quot;</span> <span class="p">;</span>
  <span class="p">:</span> <span class="n">bar</span> <span class="o">.</span><span class="s2">&quot; BAR &quot;</span> <span class="p">;</span>
  <span class="p">:</span> <span class="n">baz</span> <span class="o">.</span><span class="s2">&quot; BAZ &quot;</span> <span class="p">;</span>
<span class="n">end</span><span class="o">-</span><span class="n">module</span>

<span class="n">foobar</span> <span class="n">begin</span><span class="o">-</span><span class="n">imports</span><span class="o">-</span><span class="kn">from</span>
  <span class="nn">foo</span> <span class="n">bar</span>
<span class="n">end</span><span class="o">-</span><span class="n">imports</span><span class="o">-</span><span class="kn">from</span>
</pre></div>
</div>
</section>
<section id="unimport">
<h3><code class="docutils literal notranslate"><span class="pre">unimport</span></code></h3>
<p>( module – )</p>
<p>Remove a specified module from the current module’s wordlist order; note that it does not remove it from parent modules’ wordlist orders, so if it  had been imported within them they are still searchable.</p>
</section>
<section id="export">
<h3><code class="docutils literal notranslate"><span class="pre">export</span></code></h3>
<p>( xt “word-name” – )</p>
<p>Export <em>xt</em> from the module currently being defined as <em>word-name</em>.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>